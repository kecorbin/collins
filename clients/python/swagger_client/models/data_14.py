# coding: utf-8

"""
      Welcome to the interative api documentation   Have a look around...  

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Data14(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, plugin_html_response=None, json=None, job_id=None, result=None, plugin_raw_response=None):
        """
        Data14 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'plugin_html_response': 'str',
            'json': 'str',
            'job_id': 'int',
            'result': 'str',
            'plugin_raw_response': 'str'
        }

        self.attribute_map = {
            'plugin_html_response': 'pluginHTMLResponse',
            'json': 'json',
            'job_id': 'jobId',
            'result': 'result',
            'plugin_raw_response': 'pluginRawResponse'
        }

        self._plugin_html_response = plugin_html_response
        self._json = json
        self._job_id = job_id
        self._result = result
        self._plugin_raw_response = plugin_raw_response

    @property
    def plugin_html_response(self):
        """
        Gets the plugin_html_response of this Data14.
        

        :return: The plugin_html_response of this Data14.
        :rtype: str
        """
        return self._plugin_html_response

    @plugin_html_response.setter
    def plugin_html_response(self, plugin_html_response):
        """
        Sets the plugin_html_response of this Data14.
        

        :param plugin_html_response: The plugin_html_response of this Data14.
        :type: str
        """

        self._plugin_html_response = plugin_html_response

    @property
    def json(self):
        """
        Gets the json of this Data14.
        

        :return: The json of this Data14.
        :rtype: str
        """
        return self._json

    @json.setter
    def json(self, json):
        """
        Sets the json of this Data14.
        

        :param json: The json of this Data14.
        :type: str
        """

        self._json = json

    @property
    def job_id(self):
        """
        Gets the job_id of this Data14.
        

        :return: The job_id of this Data14.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """
        Sets the job_id of this Data14.
        

        :param job_id: The job_id of this Data14.
        :type: int
        """

        self._job_id = job_id

    @property
    def result(self):
        """
        Gets the result of this Data14.
        

        :return: The result of this Data14.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this Data14.
        

        :param result: The result of this Data14.
        :type: str
        """

        self._result = result

    @property
    def plugin_raw_response(self):
        """
        Gets the plugin_raw_response of this Data14.
        

        :return: The plugin_raw_response of this Data14.
        :rtype: str
        """
        return self._plugin_raw_response

    @plugin_raw_response.setter
    def plugin_raw_response(self, plugin_raw_response):
        """
        Sets the plugin_raw_response of this Data14.
        

        :param plugin_raw_response: The plugin_raw_response of this Data14.
        :type: str
        """

        self._plugin_raw_response = plugin_raw_response

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Data14):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
