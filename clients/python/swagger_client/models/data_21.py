# coding: utf-8

"""
      Welcome to the interative api documentation   Have a look around...  

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Data21(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, upgrade=None, hostname=None, healthy=None, lanip=None, mac=None, version=None, polling_interval=None, wanip=None, pubkey=None):
        """
        Data21 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'upgrade': 'bool',
            'hostname': 'str',
            'healthy': 'bool',
            'lanip': 'str',
            'mac': 'str',
            'version': 'str',
            'polling_interval': 'int',
            'wanip': 'str',
            'pubkey': 'str'
        }

        self.attribute_map = {
            'upgrade': 'upgrade',
            'hostname': 'hostname',
            'healthy': 'healthy',
            'lanip': 'lanip',
            'mac': 'mac',
            'version': 'version',
            'polling_interval': 'polling_interval',
            'wanip': 'wanip',
            'pubkey': 'pubkey'
        }

        self._upgrade = upgrade
        self._hostname = hostname
        self._healthy = healthy
        self._lanip = lanip
        self._mac = mac
        self._version = version
        self._polling_interval = polling_interval
        self._wanip = wanip
        self._pubkey = pubkey

    @property
    def upgrade(self):
        """
        Gets the upgrade of this Data21.
        

        :return: The upgrade of this Data21.
        :rtype: bool
        """
        return self._upgrade

    @upgrade.setter
    def upgrade(self, upgrade):
        """
        Sets the upgrade of this Data21.
        

        :param upgrade: The upgrade of this Data21.
        :type: bool
        """

        self._upgrade = upgrade

    @property
    def hostname(self):
        """
        Gets the hostname of this Data21.
        

        :return: The hostname of this Data21.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """
        Sets the hostname of this Data21.
        

        :param hostname: The hostname of this Data21.
        :type: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def healthy(self):
        """
        Gets the healthy of this Data21.
        

        :return: The healthy of this Data21.
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """
        Sets the healthy of this Data21.
        

        :param healthy: The healthy of this Data21.
        :type: bool
        """

        self._healthy = healthy

    @property
    def lanip(self):
        """
        Gets the lanip of this Data21.
        

        :return: The lanip of this Data21.
        :rtype: str
        """
        return self._lanip

    @lanip.setter
    def lanip(self, lanip):
        """
        Sets the lanip of this Data21.
        

        :param lanip: The lanip of this Data21.
        :type: str
        """

        self._lanip = lanip

    @property
    def mac(self):
        """
        Gets the mac of this Data21.
        

        :return: The mac of this Data21.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """
        Sets the mac of this Data21.
        

        :param mac: The mac of this Data21.
        :type: str
        """
        if mac is None:
            raise ValueError("Invalid value for `mac`, must not be `None`")

        self._mac = mac

    @property
    def version(self):
        """
        Gets the version of this Data21.
        

        :return: The version of this Data21.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Data21.
        

        :param version: The version of this Data21.
        :type: str
        """

        self._version = version

    @property
    def polling_interval(self):
        """
        Gets the polling_interval of this Data21.
        

        :return: The polling_interval of this Data21.
        :rtype: int
        """
        return self._polling_interval

    @polling_interval.setter
    def polling_interval(self, polling_interval):
        """
        Sets the polling_interval of this Data21.
        

        :param polling_interval: The polling_interval of this Data21.
        :type: int
        """

        self._polling_interval = polling_interval

    @property
    def wanip(self):
        """
        Gets the wanip of this Data21.
        

        :return: The wanip of this Data21.
        :rtype: str
        """
        return self._wanip

    @wanip.setter
    def wanip(self, wanip):
        """
        Sets the wanip of this Data21.
        

        :param wanip: The wanip of this Data21.
        :type: str
        """

        self._wanip = wanip

    @property
    def pubkey(self):
        """
        Gets the pubkey of this Data21.
        

        :return: The pubkey of this Data21.
        :rtype: str
        """
        return self._pubkey

    @pubkey.setter
    def pubkey(self, pubkey):
        """
        Sets the pubkey of this Data21.
        

        :param pubkey: The pubkey of this Data21.
        :type: str
        """

        self._pubkey = pubkey

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Data21):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
