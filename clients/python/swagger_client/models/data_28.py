# coding: utf-8

"""
      Welcome to the interative api documentation   Have a look around...  

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Data28(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, proxyport=None, remoteport=None, url=None, remotehost=None, processed=None, timeout=None, sourceip=None):
        """
        Data28 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'proxyport': 'object',
            'remoteport': 'int',
            'url': 'str',
            'remotehost': 'str',
            'processed': 'bool',
            'timeout': 'int',
            'sourceip': 'str'
        }

        self.attribute_map = {
            'proxyport': 'proxyport',
            'remoteport': 'remoteport',
            'url': 'url',
            'remotehost': 'remotehost',
            'processed': 'processed',
            'timeout': 'timeout',
            'sourceip': 'sourceip'
        }

        self._proxyport = proxyport
        self._remoteport = remoteport
        self._url = url
        self._remotehost = remotehost
        self._processed = processed
        self._timeout = timeout
        self._sourceip = sourceip

    @property
    def proxyport(self):
        """
        Gets the proxyport of this Data28.
        

        :return: The proxyport of this Data28.
        :rtype: object
        """
        return self._proxyport

    @proxyport.setter
    def proxyport(self, proxyport):
        """
        Sets the proxyport of this Data28.
        

        :param proxyport: The proxyport of this Data28.
        :type: object
        """
        if proxyport is None:
            raise ValueError("Invalid value for `proxyport`, must not be `None`")

        self._proxyport = proxyport

    @property
    def remoteport(self):
        """
        Gets the remoteport of this Data28.
        

        :return: The remoteport of this Data28.
        :rtype: int
        """
        return self._remoteport

    @remoteport.setter
    def remoteport(self, remoteport):
        """
        Sets the remoteport of this Data28.
        

        :param remoteport: The remoteport of this Data28.
        :type: int
        """
        if remoteport is None:
            raise ValueError("Invalid value for `remoteport`, must not be `None`")

        self._remoteport = remoteport

    @property
    def url(self):
        """
        Gets the url of this Data28.
        

        :return: The url of this Data28.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Data28.
        

        :param url: The url of this Data28.
        :type: str
        """

        self._url = url

    @property
    def remotehost(self):
        """
        Gets the remotehost of this Data28.
        

        :return: The remotehost of this Data28.
        :rtype: str
        """
        return self._remotehost

    @remotehost.setter
    def remotehost(self, remotehost):
        """
        Sets the remotehost of this Data28.
        

        :param remotehost: The remotehost of this Data28.
        :type: str
        """
        if remotehost is None:
            raise ValueError("Invalid value for `remotehost`, must not be `None`")

        self._remotehost = remotehost

    @property
    def processed(self):
        """
        Gets the processed of this Data28.
        

        :return: The processed of this Data28.
        :rtype: bool
        """
        return self._processed

    @processed.setter
    def processed(self, processed):
        """
        Sets the processed of this Data28.
        

        :param processed: The processed of this Data28.
        :type: bool
        """

        self._processed = processed

    @property
    def timeout(self):
        """
        Gets the timeout of this Data28.
        

        :return: The timeout of this Data28.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this Data28.
        

        :param timeout: The timeout of this Data28.
        :type: int
        """

        self._timeout = timeout

    @property
    def sourceip(self):
        """
        Gets the sourceip of this Data28.
        

        :return: The sourceip of this Data28.
        :rtype: str
        """
        return self._sourceip

    @sourceip.setter
    def sourceip(self, sourceip):
        """
        Sets the sourceip of this Data28.
        

        :param sourceip: The sourceip of this Data28.
        :type: str
        """

        self._sourceip = sourceip

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Data28):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
