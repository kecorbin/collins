# coding: utf-8

"""
      Welcome to the interative api documentation   Have a look around...  

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Data43(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, ctl_mfg=None, mod_version=None, system_id=None, job_name=None, boot_flag=None):
        """
        Data43 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ctl_mfg': 'str',
            'mod_version': 'str',
            'system_id': 'str',
            'job_name': 'str',
            'boot_flag': 'bool'
        }

        self.attribute_map = {
            'ctl_mfg': 'ctl_mfg',
            'mod_version': 'mod_version',
            'system_id': 'system_id',
            'job_name': 'job_name',
            'boot_flag': 'boot_flag'
        }

        self._ctl_mfg = ctl_mfg
        self._mod_version = mod_version
        self._system_id = system_id
        self._job_name = job_name
        self._boot_flag = boot_flag

    @property
    def ctl_mfg(self):
        """
        Gets the ctl_mfg of this Data43.
        

        :return: The ctl_mfg of this Data43.
        :rtype: str
        """
        return self._ctl_mfg

    @ctl_mfg.setter
    def ctl_mfg(self, ctl_mfg):
        """
        Sets the ctl_mfg of this Data43.
        

        :param ctl_mfg: The ctl_mfg of this Data43.
        :type: str
        """

        self._ctl_mfg = ctl_mfg

    @property
    def mod_version(self):
        """
        Gets the mod_version of this Data43.
        

        :return: The mod_version of this Data43.
        :rtype: str
        """
        return self._mod_version

    @mod_version.setter
    def mod_version(self, mod_version):
        """
        Sets the mod_version of this Data43.
        

        :param mod_version: The mod_version of this Data43.
        :type: str
        """

        self._mod_version = mod_version

    @property
    def system_id(self):
        """
        Gets the system_id of this Data43.
        

        :return: The system_id of this Data43.
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """
        Sets the system_id of this Data43.
        

        :param system_id: The system_id of this Data43.
        :type: str
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")

        self._system_id = system_id

    @property
    def job_name(self):
        """
        Gets the job_name of this Data43.
        

        :return: The job_name of this Data43.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """
        Sets the job_name of this Data43.
        

        :param job_name: The job_name of this Data43.
        :type: str
        """
        if job_name is None:
            raise ValueError("Invalid value for `job_name`, must not be `None`")

        self._job_name = job_name

    @property
    def boot_flag(self):
        """
        Gets the boot_flag of this Data43.
        

        :return: The boot_flag of this Data43.
        :rtype: bool
        """
        return self._boot_flag

    @boot_flag.setter
    def boot_flag(self, boot_flag):
        """
        Sets the boot_flag of this Data43.
        

        :param boot_flag: The boot_flag of this Data43.
        :type: bool
        """

        self._boot_flag = boot_flag

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Data43):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
